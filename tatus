[1mdiff --git a/README.md b/README.md[m
[1mindex 7fbfd29..412b13d 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,14 +1,14 @@[m
[31m-# botphus-core[m
[31m-> `botphusCore`是`botphus`的核心测试程序,通过底层使用[puppeteer](https://github.com/GoogleChrome/puppeteer)提供web测试单元任务配置和执行.[m
[32m+[m[32m# @botphus/server-runner[m
[32m+[m[32m> `@botphus/server-runner`是`botphus`的服务器核心测试程序,通过底层使用[puppeteer](https://github.com/GoogleChrome/puppeteer)提供web测试单元任务配置和执行.[m
 [m
 [![build status][travis-image]][travis-url][m
 [![codecov.io][codecov-image]][codecov-url][m
 [![node version][node-image]][node-url][m
 [m
[31m-[travis-image]: https://img.shields.io/travis/botphus/botphus-core/master.svg?style=flat-square[m
[31m-[travis-url]: https://travis-ci.org/botphus/botphus-core[m
[31m-[codecov-image]: https://img.shields.io/codecov/c/github/botphus/botphus-core/master.svg?style=flat-square[m
[31m-[codecov-url]: https://codecov.io/github/botphus/botphus-core?branch=master[m
[32m+[m[32m[travis-image]: https://img.shields.io/travis/botphus/botphus-server-runner/master.svg?style=flat-square[m
[32m+[m[32m[travis-url]: https://travis-ci.org/botphus/botphus-server-runner[m
[32m+[m[32m[codecov-image]: https://img.shields.io/codecov/c/github/botphus/botphus-server-runner/master.svg?style=flat-square[m
[32m+[m[32m[codecov-url]: https://codecov.io/github/botphus/botphus-server-runner?branch=master[m
 [node-image]: https://img.shields.io/badge/node.js-%3E=_6-green.svg?style=flat-square[m
 [node-url]: http://nodejs.org/download/[m
 [m
[36m@@ -18,51 +18,64 @@[m
     - 连接数据库/Redis缓存进行数据验证[m
     - Web页面事件捕获[m
 - 服务端和PC客户端均可使用[m
[32m+[m[32m- 独立的任务环境上下文[m
[32m+[m[32m- 进程池应用[m
 [m
 ## 索引[m
 - [API文档](docs/API.md)[m
 - [测试单元配置](docs/unit.md)[m
[31m-- [进程通知](docs/process_message.md)[m
[32m+[m[32m- [环境变量](docs/environment.md)[m
[32m+[m[32m- [通知](docs/event_message.md)[m
 - [常见问题](docs/troubleshooting.md)[m
 [m
 ## 快速使用[m
 [m
 ### 安装[m
 ```shell[m
[31m-npm install botphus-core --save[m
[31m-```[m
[31m-[m
[31m-### 构建[m
[31m-```shell[m
[31m-npm run build[m
[32m+[m[32mnpm install @botphus/server-runner --save[m
 ```[m
 [m
 ### 使用[m
[31m-```javascript[m
[31m-import BotphusCore, {TaskMessage, TaskType, TaskTypeDomSubType} from 'botphus-core';[m
[31m-const botphusCore = new BotphusCore();[m
[32m+[m[32m```typescript[m
[32m+[m[32mimport {TaskType, TaskTypeDomSubType} from '@botphus/rule';[m
[32m+[m[32mimport BotphusServerRunner, {destoryPool, TaskMessage} from '@botphus/server-runner';[m
[32m+[m
[32m+[m[32mconst runner = new BotphusServerRunner();[m
 (async () => {[m
     // Create task cache file[m
[31m-    const taskNo = await botphusCore.createTask('Test task', new Date().getTime(), [[m
[32m+[m[32m    const taskNo = await runner.createTask('Test task', new Date().getTime(), [[m
         {[m
[31m-            argments: ['div'],[m
[32m+[m[32m            arguments: ['div'],[m
             assertion: ['data === "wrong assertion rule"'],[m
             subType: TaskTypeDomSubType.SUB_TYPE_GET_TEXT,[m
             type: TaskType.TYPE_DOM[m
         }[m
     ]);[m
     // Start task & listen child process message[m
[31m-    const subProcess = await botphusCore.startTask(taskNo, 'https://bing.com/');[m
[31m-    // Get task exec message info[m
[31m-    subProcess.on('message', ([error, messageData]: TaskMessage) => {[m
[31m-        if (error) {[m
[31m-            global.console.log(error.stack);[m
[31m-        }[m
[31m-        global.console.log(messageData);[m
[32m+[m[32m    const myTaskEvent = await runner.startTask(taskNo, 'https://bing.com/');[m
[32m+[m[32m    await new Promise((resolve, reject) => {[m
[32m+[m[32m        // Get task exec message info[m
[32m+[m[32m        myTaskEvent.on('message', ([error, messageData]: TaskMessage) => {[m
[32m+[m[32m            if (error) {[m
[32m+[m[32m                global.console.log(error.stack);[m
[32m+[m[32m            }[m
[32m+[m[32m            global.console.log(messageData);[m
[32m+[m[32m        });[m
[32m+[m[32m        // Event close[m
[32m+[m[32m        myTaskEvent.on('exit', (code) => {[m
[32m+[m[32m            global.console.log('done:', code);[m
[32m+[m[32m            if (code === 1) {[m
[32m+[m[32m                return reject(new Error('Event exit error'));[m
[32m+[m[32m            }[m
[32m+[m[32m            resolve();[m
[32m+[m[32m        });[m
     });[m
[31m-    // Process close[m
[31m-    subProcess.on('close', (code) => {[m
[31m-        global.console.log('done:', code);[m
[32m+[m[32m})() // Current botphus is using process pool to manage task, if you want to stop main process, please destory cluster pool[m
[32m+[m[32m    .then(() => {[m
[32m+[m[32m        destoryPool();[m
[32m+[m[32m    })[m
[32m+[m[32m    .catch((err) => {[m
[32m+[m[32m        global.console.log(err);[m
[32m+[m[32m        destoryPool();[m
     });[m
[31m-})();[m
 ```[m
\ No newline at end of file[m
[1mdiff --git a/src/source/index.ts b/src/source/index.ts[m
[1mindex 4e5e56a..f4b21cd 100644[m
[1m--- a/src/source/index.ts[m
[1m+++ b/src/source/index.ts[m
[36m@@ -9,9 +9,9 @@[m [mimport {destory, register} from './lib/process_pool';[m
 import {clearTask, createTask, removeTask, startTask} from './lib/task';[m
 [m
 /**[m
[31m- * Botphus Core Task[m
[32m+[m[32m * Botphus Server runner[m
  */[m
[31m-class BotphusCore {[m
[32m+[m[32mexport default class BotphusServerRunner {[m
     private config: IBotphusRunnerConfig; // Basic Config[m
     constructor(customConfig?: IBotphusRunnerConfig) {[m
         // Update basic config[m
[36m@@ -59,8 +59,6 @@[m [mclass BotphusCore {[m
     }[m
 }[m
 [m
[31m-export default BotphusCore;[m
[31m-[m
 export const destoryPool = destory;[m
 [m
 // export types[m
