/** Declaration file generated by dts-gen */
/* tslint:disable */

export = handlebars_helpers;

declare function handlebars_helpers(groups: any, options?: any): any;

declare namespace handlebars_helpers {
    const prototype: {
    };

    function array(options: any): any;

    function code(options: any): any;

    function collection(options: any): any;

    function comparison(options: any): any;

    function date(options: any): any;

    function fs(options: any): any;

    function html(options: any): any;

    function i18n(options: any): any;

    function inflection(options: any): any;

    function logging(options: any): any;

    function markdown(options: any): any;

    function match(options: any): any;

    function math(options: any): any;

    function misc(options: any): any;

    function number(options: any): any;

    function object(options: any): any;

    function path(options: any): any;

    function regex(options: any): any;

    function string(options: any): any;

    function url(options: any): any;

    function utils(name: any, alias: any): any;

    namespace array {
        const prototype: {
        };

    }

    namespace code {
        const prototype: {
        };

    }

    namespace collection {
        const prototype: {
        };

    }

    namespace comparison {
        const prototype: {
        };

    }

    namespace date {
        const prototype: {
        };

    }

    namespace fs {
        const prototype: {
        };

    }

    namespace html {
        const prototype: {
        };

    }

    namespace i18n {
        const prototype: {
        };

    }

    namespace inflection {
        const prototype: {
        };

    }

    namespace logging {
        const prototype: {
        };

    }

    namespace markdown {
        const prototype: {
        };

    }

    namespace match {
        const prototype: {
        };

    }

    namespace math {
        const prototype: {
        };

    }

    namespace misc {
        const prototype: {
        };

    }

    namespace number {
        const prototype: {
        };

    }

    namespace object {
        const prototype: {
        };

    }

    namespace path {
        const prototype: {
        };

    }

    namespace regex {
        const prototype: {
        };

    }

    namespace string {
        const prototype: {
        };

    }

    namespace url {
        const prototype: {
        };

    }

    namespace utils {
        const prototype: {
        };

        function block(str: any, lang: any): any;

        function changecase(str: any, fn: any): any;

        function chop(str: any): any;

        function contains(val: any, obj: any, start: any): any;

        function createFrame(data: any, ...args: any[]): any;

        function falsey(val: any, keywords: any): any;

        function flatten(arr: any): any;

        function forOwn(obj: any, fn: any, thisArg: any): any;

        function get(obj: any, prop: any, a: any, b: any, c: any): any;

        function getObject(obj: any, prop: any): any;

        function isEven(i: any): any;

        function isGlob(str: any, options: any): any;

        function isNumber(num: any): any;

        function mm(list: any, patterns: any, options: any): any;

        function random(min: any, max: any): any;

        function relative(a: any, b: any, stat: any, ...args: any[]): any;

        function sortBy(arr: any, props: any, opts: any, ...args: any[]): any;

        function tag(tag: any, attribs: any, text: any): any;

        function typeOf(val: any): any;

        namespace block {
            const prototype: {
            };

        }

        namespace changecase {
            const prototype: {
            };

        }

        namespace chop {
            const prototype: {
            };

        }

        namespace contains {
            const prototype: {
            };

        }

        namespace createFrame {
            const prototype: {
            };

        }

        namespace falsey {
            const keywords: string[];

            const prototype: {
            };

        }

        namespace flatten {
            const prototype: {
            };

        }

        namespace forOwn {
            const prototype: {
            };

        }

        namespace get {
            const prototype: {
            };

        }

        namespace getObject {
            const prototype: {
            };

        }

        namespace isEven {
            const prototype: {
            };

        }

        namespace isGlob {
            const prototype: {
            };

        }

        namespace isNumber {
            const prototype: {
            };

        }

        namespace mm {
            const caches: {
            };

            const prototype: {
            };

            function all(str: any, patterns: any, options: any): any;

            function any(str: any, patterns: any, options: any): any;

            function braceExpand(pattern: any, options: any): any;

            function braces(pattern: any, options: any): any;

            function capture(pattern: any, str: any, options: any): any;

            function clearCache(): void;

            function compile(ast: any, options: any): any;

            function compilers(snapdragon: any): any;

            function contains(str: any, patterns: any, options: any): any;

            function create(pattern: any, options: any): any;

            function every(list: any, patterns: any, options: any): any;

            function isMatch(str: any, pattern: any, options: any): any;

            function makeRe(pattern: any, options: any): any;

            function match(list: any, pattern: any, options: any): any;

            function matchBase(pattern: any, options: any): any;

            function matchKeys(obj: any, patterns: any, options: any): any;

            function matcher(pattern: any, options: any): any;

            function not(list: any, patterns: any, options: any): any;

            function parse(pattern: any, options: any): any;

            function parsers(snapdragon: any): any;

            function some(list: any, patterns: any, options: any): any;

            namespace all {
                const prototype: {
                };

            }

            namespace any {
                const prototype: {
                };

            }

            namespace braceExpand {
                const prototype: {
                };

            }

            namespace braces {
                const prototype: {
                };

            }

            namespace capture {
                const prototype: {
                };

            }

            namespace clearCache {
                const prototype: {
                };

            }

            namespace compile {
                const prototype: {
                };

            }

            namespace compilers {
                const prototype: {
                };

            }

            namespace contains {
                const prototype: {
                };

            }

            namespace create {
                const prototype: {
                };

            }

            namespace every {
                const prototype: {
                };

            }

            namespace isMatch {
                const prototype: {
                };

            }

            namespace makeRe {
                const prototype: {
                };

            }

            namespace match {
                const prototype: {
                };

            }

            namespace matchBase {
                const prototype: {
                };

            }

            namespace matchKeys {
                const prototype: {
                };

            }

            namespace matcher {
                const prototype: {
                };

            }

            namespace not {
                const prototype: {
                };

            }

            namespace parse {
                const prototype: {
                };

            }

            namespace parsers {
                const prototype: {
                };

            }

            namespace some {
                const prototype: {
                };

            }

        }

        namespace random {
            const prototype: {
            };

        }

        namespace relative {
            const prototype: {
            };

            function toBase(base: any, fp: any): any;

            namespace toBase {
                const prototype: {
                };

            }

        }

        namespace sortBy {
            const prototype: {
            };

        }

        namespace tag {
            const prototype: {
            };

        }

        namespace typeOf {
            const prototype: {
            };

        }

    }

}
